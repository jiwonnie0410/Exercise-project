<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="AdminDAO">

<!--
	지원
	1. 반짝 운동별 통계
	2. 동호회 매치 운동별 통계
	3. 성별로 연령대 및 운동 통계
	4. 지역별 통계
	5. 챌린지 목록
	6. 챌린지 생성
	7. 챌린지 참여 중인 인원
	8. 챌린지 상세 내용
	9. 챌린지 참여한 사람들 목록
	10. 챌린지 총 건수
	11. 일별 수익현황
	12. 월별 수익 현황
 -->

<!-- 1. 반짝 운동별 통계 -->
		  	<select id="chartSgroup" resultType="map" >
					SELECT 	COUNT(*) "count", C.CD_NAME "exercise"
					FROM 	SGROUP S, CODE C
					WHERE 	S.SPORTS1_CD = C.CD_ID
					GROUP BY C.CD_NAME
		  	</select>


<!-- 2. 동호회 매치 운동별 통계 -->
			<select id="chartBgroup" resultType="map">
					SELECT 	COUNT(*) "count", C.CD_NAME "exercise"
					FROM 	BGROUP B, CODE C
					WHERE 	B.SPORTS2_CD = C.CD_ID
					GROUP BY C.CD_NAME
			</select>


<!-- 3. 성별로 연령대 및 운동 통계(반짝만) -->
			<select id="chartGender" parameterType="string" resultType="map">
					<!-- #{gender}성별의 각 연령대 사람들이 반짝 한 횟수 -->
					<!-- 예: 여성 10-19살, 20-29살, 30-39살, 40살 이후 사람들이 반짝 한 횟수 -->
					SELECT DECODE(SUBSTR(M.M_AGE, 1, 1),  1, 10,
					                                      2, 20,
					                                      3, 30,
					                                      4, 40,
					                                      5, 40,
					                                      6, 40,
					                                      7, 40) "AGE",
					        COUNT( DECODE(GET_CODE_NAME(S.SPORTS1_CD), '농구', 1, NULL) ) AS "BASKETBALL",
					        COUNT( DECODE(GET_CODE_NAME(S.SPORTS1_CD), '달리기/산책', 1, NULL) ) AS "RUNNING",
					        COUNT( DECODE(GET_CODE_NAME(S.SPORTS1_CD), '등산', 1, NULL) ) AS "HIKING",
					        COUNT( DECODE(GET_CODE_NAME(S.SPORTS1_CD), '배드민턴', 1, NULL) ) AS "BADMINTON",
					        COUNT( DECODE(GET_CODE_NAME(S.SPORTS1_CD), '볼링', 1, NULL) ) AS "BOWLING",
					        COUNT( DECODE(GET_CODE_NAME(S.SPORTS1_CD), '수영', 1, NULL) ) AS "SWIMMING",
					        COUNT( DECODE(GET_CODE_NAME(S.SPORTS1_CD), '자전거', 1, NULL) ) AS "BICYCLE",
					        COUNT( DECODE(GET_CODE_NAME(S.SPORTS1_CD), '기타', 1, NULL) ) AS "ETC-SPORT"
					        
					FROM MEMBERS M, SGROUP S, ACTIVE_HIST H
					
					WHERE M.M_ID = H.M_ID AND S.SG_NUM = H.SG_NUM AND M.GENDER_CD = #{value}
					
					GROUP BY DECODE(SUBSTR(M.M_AGE, 1, 1),  1, 10,
					                                   		2, 20,
					                                    	3, 30,
					                                    	4, 40,
					                                    	5, 40,
					                                      	6, 40,
					                                      	7, 40)
					ORDER BY DECODE(SUBSTR(M.M_AGE, 1, 1),  1, 10,
					                 						2, 20,
										                	3, 30,
										                 	4, 40,
										                 	5, 40,
					                                      	6, 40,
					                                      	7, 40)
			</select>


<!-- 4. 지역별 통계 -->
			<select id="chartCity" parameterType="map" resultType="map">
					<!-- ${start}월부터 ${end}월까지 지역별 사람들이 반짝 한 횟수 -->
					SELECT  TO_CHAR(S.SG_END_DTTM, 'MM') "MONTH",
					        COUNT( DECODE(SUBSTR(M.M_LOCATION, 1, 2), '서울', 1, NULL) ) AS "Seoul",
							COUNT( DECODE(SUBSTR(M.M_LOCATION, 1, 2), '대구', 1, NULL) ) AS "Daegu",
							COUNT( DECODE(SUBSTR(M.M_LOCATION, 1, 2), '부산', 1, NULL) ) AS "Busan",
							COUNT( DECODE(SUBSTR(M.M_LOCATION, 1, 2), '광주', 1, NULL) ) AS "Gwangju",
							COUNT( DECODE(SUBSTR(M.M_LOCATION, 1, 2), '인천', 1, NULL) ) AS "Incheon",
							COUNT( DECODE(SUBSTR(M.M_LOCATION, 1, 2), '대전', 1, NULL) ) AS "Daejeon",
							COUNT( DECODE(SUBSTR(M.M_LOCATION, 1, 2), '울산', 1, NULL) ) AS "Ulsan"
					FROM    MEMBERS M, SGROUP S, ACTIVE_HIST H
					WHERE   H.M_ID = M.M_ID AND H.SG_NUM = S.SG_NUM AND TO_CHAR(S.SG_END_DTTM, 'MM') BETWEEN ${start} AND ${end}
					GROUP BY TO_CHAR(S.SG_END_DTTM, 'MM')
					ORDER BY TO_CHAR(S.SG_END_DTTM, 'MM')
			</select>
			
			
<!-- 5. 챌린지 목록 -->
			<select id="challengeList" resultType="challenge">
					SELECT B.* FROM( SELECT A.*, ROWNUM RN FROM(
					
								SELECT 	CL_NUM, 
										CL_STATUS, 
										CL_NAME, 
										CL_CONTENT, 
										CL_START_DTTM, 
										CL_END_DTTM, 
										CL_SCORE
								FROM CHALLENGE
								<where>
									<if test="keyword != null and keyword != '' ">
										<if test="searchCondition == 'title' ">
											CL_NAME LIKE '%' || #{keyword} || '%'
										</if>
										<if test="searchCondition == 'content' ">
											CL_CONTENT LIKE '%' || #{keyword} || '%'
										</if>
									</if>
								</where>
								ORDER BY CL_NUM DESC
								
					)A )B WHERE RN BETWEEN #{start} AND #{end}
			</select>


<!-- 6. 챌린지 생성 -->
			<insert id="insertChallenge" parameterType="challenge">
			
					<!-- 챌린지 번호 제일 최근 거 가져오기 -> ChallengeVO(별칭 challenge)의 cl_num 필드에 담은 후 두번째 쿼리에 적용  -->
					<selectKey order="BEFORE" resultType="int" keyProperty="cl_num">
							SELECT MAX(CL_NUM)+1
							FROM CHALLENGE
					</selectKey>
					
					insert into challenge( 	cl_num, 
											cl_status, 
											cl_name, 
											cl_content,
											<if test="sports1_cd != null and sports1_cd != ''">
												sports1_cd,
											</if>
											cl_cnt, 
											cl_start_dttm, 
											cl_end_dttm, 
											cl_score
										 )
					values( ${cl_num}, 
							#{cl_status},
							#{cl_name}, 
							#{cl_content},
							<if test="sports1_cd != null and sports1_cd != ''">
								#{sports1_cd}, 
							</if>
							${cl_cnt}, 
							#{cl_start_dttm}, 
							#{cl_end_dttm}, 
							${cl_score}
						   )
			</insert>
			

<!-- 7. 챌린지 참여 중인 인원 -->
			<select id="challenegeCount" resultType="map" parameterType="map">
					SELECT C.CL_NUM, C.CL_STATUS, C.CL_NAME, C.CL_CONTENT, D.CD_NAME, 
							TO_CHAR(C.CL_START_DTTM, 'yyyy/mm/dd') "CL_START_DTTM", 
							TO_CHAR(C.CL_END_DTTM, 'yyyy/mm/dd') "CL_END_DTTM",
					        H.M_ID, H.CLH_CNT
					FROM CHALLENGE C, CODE D, CHALLENGE_HIST H
					WHERE C.SPORTS1_CD = D.CD_ID AND H.CL_NUM = C.CL_NUM
							AND C.CL_NUM = ${cl_num}
			</select>
			
			
<!-- 8. 챌린지 상세 내용 -->
			<select id="challengeDetail" resultType="map" parameterType="int">
					SELECT 	C.CL_NUM, 
							C.CL_STATUS, 
							C.CL_NAME, 
							C.CL_CONTENT, 
							D.CD_NAME, 
							C.CL_CNT, 
							TO_CHAR(C.CL_START_DTTM, 'yyyy/mm/dd') "CL_START_DTTM", 
							TO_CHAR(C.CL_END_DTTM, 'yyyy/mm/dd') "CL_END_DTTM",
					        C.CL_SCORE
					FROM CHALLENGE C, CODE D
					WHERE C.SPORTS1_CD = D.CD_ID
							AND C.CL_NUM = #{value}
			</select>
			

<!-- 9. 챌린지 참여한 사람들 목록 -->
			<select id="challengePeople" resultType="map" parameterType="int">
					SELECT 	M.M_ID, 
							M.M_NAME,
							M.M_AGE, 
							D.CD_NAME,
							SUBSTR(M.M_LOCATION, 1, 2) "M_LOCATION",
							H.CLH_CNT
					FROM CHALLENGE C, CHALLENGE_HIST H, MEMBERS M, CODE D
					WHERE C.CL_NUM = H.CL_NUM 
							AND M.M_ID = H.M_ID 
							AND M.GENDER_CD = D.CD_ID
							AND C.CL_NUM = #{value}
			</select>
			
			
<!-- 10. 챌린지 총 건수 -->
			<select id="challengeCount" resultType="int">
			  		SELECT 	COUNT(*)
			  		FROM	CHALLENGE
			  		
			  		<where>
						<if test="keyword != null and keyword != '' ">
							<if test="searchCondition == 'title' ">
								CL_NAME LIKE '%' || #{keyword} || '%'
							</if>
							<if test="searchCondition == 'content' ">
								CL_CONTENT LIKE '%' || #{keyword} || '%'
							</if>
						</if>
					</where>
		  		
		  	</select>
			
			
<!-- 11. 일별 수익 현황 -->
			<select id="dailyIncome" resultType="map">
					SELECT TO_CHAR(MONEY_DEPOSIT_DTTM, 'DD') "day",
					        SUM( MONEY_DEPOSIT ) "income",
					        SUM( MONEY_DEPOSIT ) - SUM( MONEY_WITHDRAW ) "earning"
					FROM MONEY
					GROUP BY TO_CHAR(MONEY_DEPOSIT_DTTM, 'DD')
					ORDER BY TO_CHAR(MONEY_DEPOSIT_DTTM, 'DD')
			</select>
			

<!-- 12. 월별 수익 현황 -->
			<select id="montlyIncome" resultType="map">
					SELECT TO_CHAR(MONEY_DEPOSIT_DTTM, 'MM') "month",
					        SUM( MONEY_DEPOSIT ) "income",
					        SUM( MONEY_DEPOSIT ) - SUM( MONEY_WITHDRAW ) "earning"
					FROM MONEY
					GROUP BY TO_CHAR(MONEY_DEPOSIT_DTTM, 'MM')
					ORDER BY TO_CHAR(MONEY_DEPOSIT_DTTM, 'MM')
			</select>
			

	
	
	
	
	
	<!--진영  -->
	<!-- 01. 회원정보 상세조회 -->
    <select id="viewMember" resultType="members">
        SELECT 
          m_id AS m_id, 
          m_name AS m_name,
          m_email AS m_email
          <!-- user_regdate AS userRegdate,
          user_regdate AS userUpdatedate -->
        FROM MEMBERS
       <!--  WHERE m_id = #{m_id} -->
        WHERE m_id =#{m_id}
    </select>
    
    
	<!--2.전체조회  -->
	<select id="getUserList" resultType="members" parameterType="members">
		select M_ID, 
				M_PASSWORD, 
				M_NAME, 
				M_NICK,
				M_IMAGE_CD,
				M_XY,
				M_LOCATION,
				M_AGE,
				get_code_name(GENDER_CD) gender_cd,
				M_GRANT,
				M_LEVEL_CD,
				get_code_name(M_STATUS_CD) m_status_cd,
				M_RADIUS, 
				M_NOTICE1,
				M_NOTICE2,
				M_NOTICE3,
				M_EMAIL
		from MEMBERS
		<where>
			<if test="m_id != null and m_id != '' ">
				m_id like '%' || #{m_id} || '%'
			</if>
			<if test="m_name != null and m_name != '' ">
				and m_name like '%' || #{m_name} || '%'
			</if>
		</where>
	</select>
	
	
	
	<!-- 3.삭제 -->
	<delete id="deleteUser" parameterType="members">
		delete from MEMBERS 
		where m_id = #{m_id}
	</delete>	
	
	
	
		
			
</mapper>